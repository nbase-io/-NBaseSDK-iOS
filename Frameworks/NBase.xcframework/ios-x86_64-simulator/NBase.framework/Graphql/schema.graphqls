"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  project(id: ID): Project
  linkingByUser(project_id: String, projectId: String, username: String, provider: String, password: String): Linking
  linkings(memberId: String, offset: Int, per_page: Int, projectId: String, search: String, query: String, startDate: String, endDate: String): LinkingConnection
  configs(projectId: String, offset: Int, per_page: Int, search: String, query: String, startDate: String, endDate: String): ConfigConnection
  items(offset: Int, per_page: Int, projectId: String!, type: String!, search: String, query: String, startDate: String, endDate: String, deleted: Boolean): ItemConnection
  initialize(projectId: String!, storeId: String!): Initialize
  initializeV2(projectId: String!, storeId: String!, projectKey: String): Initialize
  initializeV3(projectId: String!, storeId: String!, projectKey: String!): Initialize
  initializeUrls(projectId: String!): initializeUrls
  initializeGDPR(projectId: String!): InitializeGDPRType
  ticket(id: ID!, projectId: String!): Ticket
  tickets(projectId: String, status: Int, memberId: String, offset: Int, per_page: Int, search: String, query: String, startDate: String, endDate: String): TicketConnection
  noticeApp(projectId: String!, storeId: String!, type: String): NoticeAppConnection
  maintenanceApp(projectId: String!): Maintenance
  maintenanceAppV2(projectId: String!, storeId: String!): Maintenance
  updateApp(id: ID, projectId: String!, storeId: String): Update
  getNcpSignature(projectId: String!, method: String!, url: String!): Signature
  voideds(projectId: String!, memberId: String!): VoidedConnection
  member: Member
  guest(projectId: String!, deviceId: String!): Guest
  friendship(id: String!, projectId: String!): FriendShipType
  friendships(projectId: String!, filter: String!, sort: String, option: String): FriendShipsConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Project implements Node {
  """The ID of an object"""
  id: ID!
  user_id: User!

  """분류"""
  category_id: String
  ncp_project_id: String

  """푸시분류"""
  push: String
  language_list: String
  name: String!
  key: String!
  secret_key: String!
  desc: String
  fcm: String
  public_key: Store
  app_id: Store

  """기본CDN주소"""
  cdn: String
  ncp: Ncp
  webhook: WebHook
  google_key: Store
  server_key: Store
  auth_key: Auth

  """해시키"""
  hash_key: String
  extra_permission: String
  voided_enable: Boolean
  voided_count: Int
  voided_price: Int
  voided_message: String
  voided_messageMulti: [Language]
  ccu_enable: Boolean
  cs_push_enable: Boolean
  cs_push_msg: String
  google_iap_valid_version: String
  apple_iap_valid_version: String
  one_iap_valid_version: String
  createdAt(format: String): String
  updatedAt(format: String): String
  third_pay_desc: String
  third_sdk: Boolean
  paid: Int
  dau_free: Int

  """AppSafer 사용 여부"""
  appsafer: Boolean
  appsafer_challenge: String
  plugin: Plugin
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  local: Local
  state: Int
  admin: Boolean
  ip: String
}

type Local {
  email: String
  name: String
}

type Store implements Node {
  """The ID of an object"""
  id: ID!
  google: String
  google_package: String
  googleplay: String
  googleplay_package: String
  apple: String
  apple_package: String
  one: String
  one_package: String
  oneplay: String
  oneplay_package: String
  galaxy: String
  pc: String
  pc_package: String
}

type Ncp {
  objectstorage_access_key: String
  objectstorage_secret_key: String
  objectstorage_bucket: String
  sens_push_service_id: String
  sens_sms_access_key: String
  sens_sms_service_id: String
  sens_sms_secret_key: String
  sens_push_access_key: String
  sens_push_secret_key: String
}

type WebHook {
  """구입 아이템"""
  purchase: String

  """구입 아이템(Sandbox)"""
  purchase_sandbox: String

  """일반 아이템"""
  item: String

  """일반 아이템(Sandbox)"""
  item_sandbox: String
}

type Auth {
  enable: Boolean
  google_client_id: String
  facebook_app_id: String
  facebook_app_secret: String
  apple_key: String
  apple_key_id: String
  apple_team_id: String
}

type Language {
  lang: String
  value: String
  default: Boolean
}

type Plugin {
  api_key: String
  url: String
  member_migration: Boolean
}

type Linking implements Node {
  """The ID of an object"""
  id: ID!
  project_id: Project!
  member_id: Member
  username: String!
  password: String!
  provider: String!
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type Member implements Node {
  """The ID of an object"""
  id: ID!
  project_id: Project!
  username: String
  store_id: String
  country: String
  remoteip: String
  nickname: String
  adid: String
  device: String
  network: String
  version: String
  model: String
  token: String
  push: Boolean
  push_date: push_date
  night: Boolean
  night_date: night_date

  """광고 수신 여부"""
  ad: Boolean
  deleted: Boolean
  device_id: String
  createdAt(format: String): String
  updatedAt(format: String): String
  loginedAt(format: String): String
  deletedAt(format: String): String
  withdrewAt(format: String): String
  gdpr: Gdpr
  agree: agree
  verify: verify
  userdata: String
}

type push_date implements Node {
  """The ID of an object"""
  id: ID!
  on: Int
  off: Int
}

type night_date implements Node {
  """The ID of an object"""
  id: ID!
  on: Int
  off: Int
}

type Gdpr {
  status: Int
  email_verified: String
  email_cert_key: String
  email_cert_expired_at(format: String): String
  checked_story_category_ids: [String]
}

type agree implements Node {
  """The ID of an object"""
  id: ID!
  termsofuse: String
  termsofuseAt: Int
  privacypolicy: String
  privacypolicyAt: Int
}

type verify implements Node {
  """The ID of an object"""
  id: ID!
  key: String
  updatedAt(format: String): String
}

"""A connection to a list of items."""
type LinkingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkingEdge]
  totalCount: Int!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type LinkingEdge {
  """The item at the end of the edge"""
  node: Linking

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type ConfigEdge {
  """The item at the end of the edge"""
  node: Config

  """A cursor for use in pagination"""
  cursor: String!
}

type Config implements Node {
  """The ID of an object"""
  id: ID!
  project_id: Project!
  key: String!
  value: String!
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge"""
  node: Item

  """A cursor for use in pagination"""
  cursor: String!
}

type Item implements Node {
  """The ID of an object"""
  id: ID!
  status: Int
  type: String
  project_id: String!
  store_id: String!
  store_item_id: String!
  name: String!
  userdata: String
  user_id: User!
  prices: [PriceList]
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type PriceList {
  currency: String
  price: String
  printPrice: String
}

type Initialize implements Node {
  """The ID of an object"""
  id: ID!
  platform: String
  country: String
  remote_ip: String
  language: String
  push: Boolean
  store: Boolean
  key: Boolean
  sendbox: Boolean
  sandbox: Boolean
  city: String
  project: Project
  itemlist: ItemStore
  update: Update
  maintenance: Maintenance
  config: [Config]
  notice: Int
  integrationConfigs: [IntegrationConfig]
  iap: [Item]
}

type ItemStore implements Node {
  """The ID of an object"""
  id: ID!
  google: [Item]
  apple: [Item]
  one: [Item]
  galaxy: [Item]
}

type Update implements Node {
  """The ID of an object"""
  id: ID!
  project_id: Project!
  store_id: String!
  status: Int
  version: String
  version_code: String
  message: Language
  user_id: User!
  is_force: Boolean
  url: String
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type Maintenance implements Node {
  """The ID of an object"""
  id: ID!
  project_id: Project!
  store: Store
  store_id: String

  """이동 주소"""
  url: String

  """점검 메시지"""
  message: [Language]
  user_id: User!
  startedAt: String!
  endedAt: String!
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type IntegrationConfig implements Node {
  """The ID of an object"""
  id: ID!
  project_id: String
  integration_id: String
  group: String
  type: String
  key: String
  value: String
  created_at(format: String): String
  updated_at(format: String): String
  requested_at(format: String): String
}

type initializeUrls implements Node {
  """The ID of an object"""
  id: ID!
  cs_term: String
  cs_privacy: String
  cs_refund: String
}

type InitializeGDPRType implements Node {
  """The ID of an object"""
  id: ID!
  enable: Boolean
  isAdApp: Boolean
  eu: String
  country: String
  remoteIp: String
  gdprStory: [gdprStory]
}

type gdprStory implements Node {
  """The ID of an object"""
  id: ID!
  required: Boolean
  title: String
  detailUrl: String
  key: String
}

type Ticket implements Node {
  """The ID of an object"""
  id: ID!
  project_id: String!
  store_id: String!
  status: Int
  member_id: String
  type: String
  phone: String
  email: String
  subject: String
  replies: [TicketReply]
  rate: Int
  closedAt(format: String): String
  createdAt(format: String): String
  updatedAt(format: String): String
  file: [String]
  baseUrl: String
}

type TicketReply implements Node {
  """The ID of an object"""
  id: ID!
  ticket_id: String
  user_id: String
  member_id: String
  body: String
  type: String
  uuid: String
  file: [String]
  createdAt(format: String): String
  updatedAt(format: String): String
}

"""A connection to a list of items."""
type TicketConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketEdge]
  totalCount: Int!
  wholeCount: Int!
  ingCount: Int!
  doneCount: Int!
  baseUrl: String
}

"""An edge in a connection."""
type TicketEdge {
  """The item at the end of the edge"""
  node: Ticket

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type NoticeAppConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoticeAppEdge]
  totalCount: Int!
  baseUrl: String!
}

"""An edge in a connection."""
type NoticeAppEdge {
  """The item at the end of the edge"""
  node: Notice

  """A cursor for use in pagination"""
  cursor: String!
}

type Notice implements Node {
  """The ID of an object"""
  id: ID!
  project_id: Project!
  country: String
  type: String
  enable: Boolean
  startDate: String
  endDate: String
  sort: Float
  image: [Language]
  url: String
  scheme: String
  store_id: String
  user_id: User!
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type Signature implements Node {
  """The ID of an object"""
  id: ID!
  signature: String
  accesskey: String
  timestamp: String
}

"""A connection to a list of items."""
type VoidedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoidedEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type VoidedEdge {
  """The item at the end of the edge"""
  node: Voided

  """A cursor for use in pagination"""
  cursor: String!
}

type Voided implements Node {
  """The ID of an object"""
  id: ID!

  """프로젝트 아이디"""
  project_id: String

  """멤버 아이디"""
  member_id: String

  """패키지 아이디"""
  package_id: String
  purchase_id: Purchase

  """상태"""
  status: Int

  """금액"""
  price: Float

  """삭제여부"""
  deleted: Boolean
  purchasedAt(format: String): String
  voidedAt(format: String): String
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String

  """통화"""
  currency: String
}

type Purchase implements Node {
  """The ID of an object"""
  id: ID!
  status: Int
  project_id: String!
  user_id: Member
  order_id: String
  signature: String!
  transaction_id: String!
  unique_id: String
  store_id: String!
  payment_id: String
  currency: String!
  price: Float!
  remoteip: String
  sandbox: Boolean
  userdata: String
  country: String
  request: String
  response: String
  item_id: Item
  server_id: String
  player_id: String
  cancel: String
  canceledAt(format: String): String
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type Guest implements Node {
  """The ID of an object"""
  id: ID!
  status: Int
  project_id: String!
  user_id: String!
  device_id: String!
  password: String
  userdata: String
  loginedAt(format: String): String
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

type FriendShipType {
  id: String
  project_id: String
  status: String
  user_id: String
  message: String
  user: Member
  friend_id: String
  friend: Member
  deleted: String
  created_at(format: String): String
  updated_at(format: String): String
  requested_at(format: String): String
}

"""A connection to a list of items."""
type FriendShipsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FriendShipsEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type FriendShipsEdge {
  """The item at the end of the edge"""
  node: FriendShipType

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createMember(input: CreateMemberInput!): CreateMemberPayload
  deleteMember(input: DeleteMemberInput!): DeleteMemberPayload
  withdrawMember(input: WithdrawMemberInput!): WithdrawMemberPayload
  setMember(input: SetMemberInput!): SetMemberPayload
  createMemberByThirdPartySDK(input: createMemberByThirdPartySDKInput!): createMemberByThirdPartySDKPayload
  signUp(input: signUpInput!): signUpPayload
  signIn(input: SignInInput!): SignInPayload
  signInV2(input: SignInV2Input!): SignInV2Payload
  signInV3(input: signInV3Input!): signInV3Payload
  signOut(input: SignOutInput!): SignOutPayload
  signInWithToken(input: signInWithTokenInput!): signInWithTokenPayload
  signInWithOAuth(input: signInWithOAuthInput!): signInWithOAuthPayload
  signInWithSSO(input: signInWithSSOInput!): signInWithSSOPayload
  signInWithPassword(input: signInWithPasswordInput!): signInWithPasswordPayload
  signInWithAnonymously(input: signInWithAnonymouslyInput!): signInWithAnonymouslyPayload
  resetPasswordForEmail(input: resetPasswordForEmailInput!): resetPasswordForEmailPayload
  updatePassword(input: updatePasswordInput!): updatePasswordPayload
  createLinking(input: createLinkingInput!): createLinkingPayload
  updateLinking(input: updateLinkingInput!): updateLinkingPayload
  updateLinkingPassword(input: updateLinkingPasswordInput!): updateLinkingPasswordPayload
  deleteLinking(input: DeleteLinkingInput!): DeleteLinkingPayload
  createPurchase(input: CreatePurchaseInput!): CreatePurchasePayload
  createPurchaseV3(input: createPurchaseV3Input!): createPurchaseV3Payload
  createPurchaseByThirdPartySDK(input: createPurchaseByThirdPartySDKInput!): createPurchaseByThirdPartySDKPayload
  createPurchaseVoided(input: createPurchaseVoidedInput!): createPurchaseVoidedPayload
  checkPurchase(input: checkPurchaseInput!): checkPurchasePayload
  checkPurchaseV3(input: checkPurchaseV3Input!): checkPurchaseV3Payload
  useCoupon(input: UseCouponInput!): UseCouponPayload
  createTicket(input: CreateTicketInput!): CreateTicketPayload
  createTicketReply(input: CreateTicketReplyInput!): CreateTicketReplyPayload
  createAuthCode(input: CreateAuthCodeInput!): CreateAuthCodePayload
  requestGDPRMail(input: requestGDPRMailInput!): requestGDPRMailPayload
  verifyGDPRMail(input: verifyGDPRMailInput!): verifyGDPRMailPayload
  createGuest(input: createGuestInput!): createGuestPayload
  removeFriend(input: removeFriendInput!): removeFriendPayload
  rejectFriend(input: rejectFriendInput!): rejectFriendPayload
  acceptFriend(input: acceptFriendInput!): acceptFriendPayload
  requestFriend(input: requestFriendInput!): requestFriendPayload
  createLogging(input: createLoggingInput!): createLoggingPayload
}

type CreateMemberPayload {
  member: Member
  clientMutationId: String
}

input CreateMemberInput {
  username: String
  password: String
  projectId: String
  storeId: String!
  clientMutationId: String
}

type DeleteMemberPayload {
  member: Member
  withdrewAt: Int
  clientMutationId: String
}

input DeleteMemberInput {
  id: ID!
  repair: Boolean
  projectId: String
  storeId: String!
  clientMutationId: String
}

type WithdrawMemberPayload {
  member: Member
  clientMutationId: String
}

input WithdrawMemberInput {
  id: String!
  projectId: String!
  clientMutationId: String
}

type SetMemberPayload {
  member: Member
  clientMutationId: String
}

input SetMemberInput {
  projectId: String
  adid: String
  device: String
  network: String
  version: String
  model: String
  token: String
  nickname: String
  push: Boolean
  night: Boolean
  language: String
  country: String
  timezone: String
  channel: String
  ad: Boolean
  agree_termsofuse: Boolean
  agree_privacypolicy: Boolean
  gdpr: GDPRInput
  userdata: String
  clientMutationId: String
}

input GDPRInput {
  """0: 초기상태, 2: 이메일 주소 검증완료, 3: 16세 이상 완료, 4: 16세 이하 완료"""
  status: Int

  """인증에 사용된 이메일 주소"""
  email_verified: String

  """동의 화면에서 체크한 스토리 카테고리 아이디.(필수도 포함)"""
  checked_story_category_ids: [String]
}

type createMemberByThirdPartySDKPayload {
  member: Member
  clientMutationId: String
}

input createMemberByThirdPartySDKInput {
  projectId: String!
  storeId: String!
  id: String!
  password: String
  third_sdk: Boolean
  clientMutationId: String
}

type signUpPayload {
  member: Member
  token: String
  clientMutationId: String
}

input signUpInput {
  projectId: String!
  storeId: String!
  username: String!
  password: String!
  deviceId: String
  options: String
  clientMutationId: String
}

type SignInPayload {
  token: String
  member: Member
  clientMutationId: String
}

input SignInInput {
  memberId: ID!
  projectId: String
  storeId: String!
  clientMutationId: String
}

type SignInV2Payload {
  token: String
  member: Member
  clientMutationId: String
}

input SignInV2Input {
  memberId: ID!
  username: String
  password: String!
  projectId: String
  storeId: String!
  clientMutationId: String
}

type signInV3Payload {
  id: String
  projectId: String
  email: String
  token: String
  verify: String
  agree: String
  provider: String
  providerId: String
  nickname: String
  clientMutationId: String
}

input signInV3Input {
  projectId: String!
  storeId: String!
  provider: String!
  providerId: String!
  providerEmail: String!
  providerToken: String
  options: String
  clientMutationId: String
}

type SignOutPayload {
  member: Member
  clientMutationId: String
}

input SignOutInput {
  memberId: ID!
  projectId: String
  storeId: String!
  clientMutationId: String
}

type signInWithTokenPayload {
  member: Member
  token: String
  clientMutationId: String
}

input signInWithTokenInput {
  projectId: String!
  storeId: String!
  provider: String
  providerId: String
  providerToken: String
  deviceId: String
  options: String
  clientMutationId: String
}

type signInWithOAuthPayload {
  member: Member
  token: String
  clientMutationId: String
}

input signInWithOAuthInput {
  projectId: String!
  storeId: String!
  username: String!
  password: String!
  deviceId: String
  options: String
  clientMutationId: String
}

type signInWithSSOPayload {
  member: Member
  token: String
  clientMutationId: String
}

input signInWithSSOInput {
  projectId: String!
  providerId: String!
  providerToken: String
  clientMutationId: String
}

type signInWithPasswordPayload {
  member: Member
  token: String
  clientMutationId: String
}

input signInWithPasswordInput {
  projectId: String!
  storeId: String!
  username: String!
  password: String!
  deviceId: String
  options: String
  clientMutationId: String
}

type signInWithAnonymouslyPayload {
  member: Member
  token: String
  clientMutationId: String
}

input signInWithAnonymouslyInput {
  projectId: String!
  storeId: String!
  deviceId: String!
  options: String
  clientMutationId: String
}

type resetPasswordForEmailPayload {
  id: String
  token: String
  clientMutationId: String
}

input resetPasswordForEmailInput {
  projectId: String!
  storeId: String!
  username: String!
  options: String
  clientMutationId: String
}

type updatePasswordPayload {
  member: Member
  clientMutationId: String
}

input updatePasswordInput {
  projectId: String!
  storeId: String!
  password: String!
  options: String
  clientMutationId: String
}

type createLinkingPayload {
  linking: Linking
  clientMutationId: String
}

input createLinkingInput {
  projectId: String
  memberId: String
  username: String
  password: String
  provider: String
  email: String
  clientMutationId: String
}

type updateLinkingPayload {
  linking: Linking
  clientMutationId: String
}

input updateLinkingInput {
  projectId: String
  memberId: String
  username: String
  password: String
  provider: String
  email: String
  clientMutationId: String
}

type updateLinkingPasswordPayload {
  linking: Linking
  clientMutationId: String
}

input updateLinkingPasswordInput {
  oldPassword: String
  projectId: String
  memberId: String
  username: String
  password: String
  provider: String
  email: String
  clientMutationId: String
}

type DeleteLinkingPayload {
  linking: Linking
  clientMutationId: String
}

input DeleteLinkingInput {
  id: ID!
  projectId: String!
  clientMutationId: String
}

type CreatePurchasePayload {
  purchase: Purchase
  clientMutationId: String
}

input CreatePurchaseInput {
  projectId: String!
  authCode: String
  orderId: String
  receipt: String
  signature: String
  itemId: String
  storeId: String
  userdata: String
  country: String
  packageId: String
  paymentId: String
  currency: String
  iapVersion: Int
  price: Float
  canceledAt: String
  cancel: String
  serverId: String
  playerId: String
  level: Int
  metadata: String
  options: String
  clientMutationId: String
}

type createPurchaseV3Payload {
  purchase: Purchase
  clientMutationId: String
}

input createPurchaseV3Input {
  projectId: String!
  authCode: String
  orderId: String
  receipt: String
  signature: String
  itemId: String
  storeId: String
  userdata: String
  country: String
  packageId: String
  paymentId: String
  currency: String
  iapVersion: Int
  price: Float
  canceledAt: String
  cancel: String
  serverId: String
  playerId: String
  level: Int
  metadata: String
  options: String
  clientMutationId: String
}

type createPurchaseByThirdPartySDKPayload {
  purchase: Purchase
  clientMutationId: String
}

input createPurchaseByThirdPartySDKInput {
  projectId: String!
  productId: String!
  storeId: String!
  currency: String!
  price: Float!
  transactionId: String!
  paymentId: String
  uniqueId: String
  clientMutationId: String
}

type createPurchaseVoidedPayload {
  purchase: Purchase
  clientMutationId: String
}

input createPurchaseVoidedInput {
  voidedId: String!
  projectId: String!
  authCode: String
  orderId: String
  receipt: String
  signature: String
  itemId: String
  storeId: String
  userdata: String
  country: String
  packageId: String
  paymentId: String
  currency: String
  iapVersion: Int
  price: Float
  canceledAt: String
  cancel: String
  serverId: String
  playerId: String
  level: Int
  metadata: String
  options: String
  clientMutationId: String
}

type checkPurchasePayload {
  status: Int
  code: String
  clientMutationId: String
}

input checkPurchaseInput {
  projectId: String!
  storeId: String!
  productId: String!
  paymentId: String
  userdata: String
  clientMutationId: String
}

type checkPurchaseV3Payload {
  status: Int
  code: String
  clientMutationId: String
}

input checkPurchaseV3Input {
  projectId: String!
  storeId: String!
  productId: String!
  paymentId: String
  userdata: String
  clientMutationId: String
}

type UseCouponPayload {
  couponlog: CouponLog
  clientMutationId: String
}

type CouponLog implements Node {
  """The ID of an object"""
  id: ID!
  coupon_id: Coupon!
  enable: String
  status: Boolean
  number: String
  userdata: String
  tags: String
  region: String
  usedAt: String
  request: String
  response: String
  createdAt(format: String): String
  updatedAt(format: String): String
}

type Coupon implements Node {
  """The ID of an object"""
  id: ID!
  enable: Int
  project_id: Project!
  status: Boolean
  store_id: String
  type: String
  desc: String
  used: Int
  count: Int
  limit: Int
  region: String
  length: Int
  prefix: String
  suffix: String
  title: String
  content: String
  keyword: String
  request: String
  response: String
  items: [ItemList]
  startedAt(format: String): String
  endedAt(format: String): String
  createdAt(format: String): String
  updatedAt(format: String): String
}

type ItemList {
  item_id: String
  store_item_id: String
  count: Int
}

input UseCouponInput {
  number: String!
  projectId: String!
  storeId: String
  userData: String
  clientMutationId: String
}

type CreateTicketPayload {
  ticket: Ticket
  clientMutationId: String
}

input CreateTicketInput {
  """ProjectID"""
  projectId: String!

  """StoreID"""
  storeId: String
  status: Int

  """Subject"""
  subject: String

  """memberId"""
  memberId: String
  type: String
  phone: String
  email: String

  """Body"""
  body: String

  """File"""
  file: [String]
  rate: Int
  serverName: String
  adminId: String
  closedAt: String
  mode: String
  character: String
  language: String
  agree_termsofuse: Boolean
  agree_type: Boolean
  clientMutationId: String
}

type CreateTicketReplyPayload {
  ticketreply: TicketReply
  clientMutationId: String
}

input CreateTicketReplyInput {
  projectId: String!
  memberId: String
  body: String!
  ticketId: String!
  file: [String]
  type: String!
  clientMutationId: String
}

type CreateAuthCodePayload {
  authcode: AuthCode
  clientMutationId: String
}

type AuthCode implements Node {
  """The ID of an object"""
  id: ID!
  authcode: String
}

input CreateAuthCodeInput {
  projectId: String!
  productId: String!
  clientMutationId: String
}

type requestGDPRMailPayload {
  key: String
  expiredAt: String
  clientMutationId: String
}

input requestGDPRMailInput {
  projectId: String!
  email: String!
  clientMutationId: String
}

type verifyGDPRMailPayload {
  status: Int
  clientMutationId: String
}

input verifyGDPRMailInput {
  projectId: String!
  email: String!
  key: String!
  clientMutationId: String
}

type createGuestPayload {
  guest: Guest
  clientMutationId: String
}

input createGuestInput {
  projectId: String!
  deviceId: String!
  userId: String!
  password: String
  userData: String
  clientMutationId: String
}

type removeFriendPayload {
  friendship: FriendShipType
  clientMutationId: String
}

input removeFriendInput {
  projectId: String!
  friendId: String!
  clientMutationId: String
}

type rejectFriendPayload {
  friendship: FriendShipType
  clientMutationId: String
}

input rejectFriendInput {
  projectId: String!
  friendId: String!
  message: String
  clientMutationId: String
}

type acceptFriendPayload {
  friendship: FriendShipType
  clientMutationId: String
}

input acceptFriendInput {
  projectId: String!
  friendId: String!
  clientMutationId: String
}

type requestFriendPayload {
  friendship: FriendShipType
  clientMutationId: String
}

input requestFriendInput {
  projectId: String!
  friendId: String!
  message: String
  clientMutationId: String
}

type createLoggingPayload {
  logging: Logging
  clientMutationId: String
}

type Logging implements Node {
  """The ID of an object"""
  id: ID!
  project_id: String
  user_id: String
  errorCode: String
  message: String
  createdAt(format: String): String
  updatedAt(format: String): String
  deletedAt(format: String): String
}

input createLoggingInput {
  projectId: String
  storeId: String
  level: String
  errorCode: String
  message: String
  memberId: String
  clientMutationId: String
}